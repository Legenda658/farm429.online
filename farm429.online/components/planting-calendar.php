<?php
$isGuest = !isset($_SESSION['user_id']);
?>
<div class="planting-section">
    <div class="section-header green-header" onclick="toggleCalendarContent()">
        <span>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Å–∞–¥–∫–∏ üå±</span>
        <span class="accordion-icon">‚ñº</span>
    </div>
    <div class="accordion-content" itemscope itemtype="https://schema.org/Event">
        <meta itemprop="name" content="–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Å–∞–¥–æ–∫ –∏ —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏">
        <meta itemprop="description" content="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Å–∞–¥–æ–∫ –∏ —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –≤ —É–º–Ω–æ–π —Ñ–µ—Ä–º–µ">
        <meta itemprop="startDate" content="<?php echo date('Y-m-d'); ?>">
        <?php if ($isGuest): ?>
        <div class="guest-notice">
            <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <a href="authentication/login.php">–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</a>.</p>
        </div>
        <?php endif; ?>
        <div class="calendar-container">
            <div class="calendar-controls">
                <button id="prev-month" class="btn btn-sm btn-outline-secondary">‚Üê</button>
                <h3 id="current-month">–Ø–Ω–≤–∞—Ä—å 2024</h3>
                <button id="next-month" class="btn btn-sm btn-outline-secondary">‚Üí</button>
            </div>
            <div class="calendar-grid">
                <div class="calendar-header">
                    <div>–ü–Ω</div>
                    <div>–í—Ç</div>
                    <div>–°—Ä</div>
                    <div>–ß—Ç</div>
                    <div>–ü—Ç</div>
                    <div>–°–±</div>
                    <div>–í—Å</div>
                </div>
                <div class="calendar-days" id="calendar-days">
                    <!-- –î–Ω–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ JavaScript -->
                </div>
            </div>
            <div class="planting-events" id="planting-events">
                <div class="events-header">
                    <h3>–°–æ–±—ã—Ç–∏—è –Ω–∞ <span id="selected-date">–≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É</span></h3>
                    <div class="action-buttons">
                        <button id="add-event-btn" class="action-button event-button" <?php echo $isGuest ? 'disabled' : ''; ?>>+ –°–æ–±—ã—Ç–∏–µ</button>
                        <button id="add-reminder-btn" class="action-button reminder-button" <?php echo $isGuest ? 'disabled' : ''; ?>>+ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</button>
                    </div>
                </div>
                <div id="events-list">
                    <!-- –°–æ–±—ã—Ç–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
                    <div class="no-events">–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É</div>
                </div>
            </div>
            <div class="planting-form" id="event-form" style="display: none;">
                <h3 id="form-title">–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ</h3>
                <form id="add-planting-form">
                    <div class="form-group">
                        <label for="event-type">–¢–∏–ø —Å–æ–±—ã—Ç–∏—è</label>
                        <select id="event-type" name="event-type" required>
                            <option value="planting">–ü–æ—Å–∞–¥–∫–∞</option>
                            <option value="sprouting">–í—Å—Ö–æ–¥—ã</option>
                            <option value="watering">–ü–æ–ª–∏–≤</option>
                            <option value="fertilizing">–£–¥–æ–±—Ä–µ–Ω–∏–µ</option>
                            <option value="harvesting">–°–±–æ—Ä —É—Ä–æ–∂–∞—è</option>
                            <option value="reminder">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</option>
                            <option value="other">–î—Ä—É–≥–æ–µ</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="plant-name">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è</label>
                        <input type="text" id="plant-name" name="plant-name" required>
                    </div>
                    <div class="form-group">
                        <label for="event-date">–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è</label>
                        <input type="date" id="event-date" name="event-date" required>
                    </div>
                    <div class="form-group time-group">
                        <label for="event-time">–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è</label>
                        <input type="time" id="event-time" name="event-time">
                    </div>
                    <div class="form-group">
                        <label for="event-notes">–ó–∞–º–µ—Ç–∫–∏</label>
                        <textarea id="event-notes" name="event-notes" rows="3" placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏"></textarea>
                    </div>
                    <div class="form-group reminder-details" id="reminder-details" style="display: none;">
                        <label for="reminder-date">–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</label>
                        <input type="date" id="reminder-date" name="reminder-date">
                        <label for="reminder-time">–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</label>
                        <input type="time" id="reminder-time" name="reminder-time">
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="save-button">–î–æ–±–∞–≤–∏—Ç—å</button>
                        <button type="button" id="cancel-form-btn" class="cancel-button">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
        </div>
        <meta itemprop="dateModified" content="<?php echo date('c'); ?>">
    </div>
</div>
<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è -->
<div class="modal" id="event-modal">
    <div class="modal-content">
        <span class="close-button" id="close-event-modal">&times;</span>
        <h2 id="event-modal-title">–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è</h2>
        <div id="event-modal-content">
            <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ JavaScript -->
        </div>
        <div class="modal-footer">
            <button id="edit-event-btn" class="btn btn-primary">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
            <button id="delete-event-btn" class="btn btn-danger">–£–¥–∞–ª–∏—Ç—å</button>
            <button id="close-event-btn" class="btn btn-secondary">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
    </div>
</div>
<style>
/* –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ */
.planting-section {
    margin-top: 20px;
    margin-bottom: 20px;
}
.section-header {
    padding: 15px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    margin-bottom: 0;
    background-color: #4CAF50 !important;
    color: white !important;
    font-size: 18px;
    font-weight: 500;
}
.green-header {
    background-color: #4CAF50 !important;
    color: white !important;
}
[data-theme="dark"] .section-header, 
[data-theme="dark"] .green-header {
    background-color: #66BB6A !important;
}
.calendar-container {
    background-color: var(--card-bg);
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    max-width: 1000px;
    margin: 0 auto;
}
.calendar-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}
.calendar-controls button {
    background: var(--button-bg);
    border: 1px solid var(--border-color);
    color: var(--text-color);
    padding: 5px 10px;
    cursor: pointer;
    border-radius: 4px;
}
.calendar-controls h3 {
    margin: 0;
    font-size: 20px;
    color: var(--primary-color);
}
.calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 5px;
    margin-bottom: 30px;
}
.calendar-header {
    display: contents;
}
.calendar-header div {
    text-align: center;
    font-weight: bold;
    padding: 10px;
    color: var(--primary-color);
}
.calendar-days {
    display: contents;
}
.calendar-day {
    height: 80px;
    background-color: var(--input-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    padding: 5px;
    position: relative;
    cursor: pointer;
    overflow: hidden;
    color: var(--text-color);
}
.calendar-day:hover {
    background-color: var(--hover-color);
}
.day-number {
    font-weight: bold;
    font-size: 14px;
    position: absolute;
    top: 5px;
    right: 5px;
    color: var(--text-color);
}
.other-month {
    opacity: 0.5;
}
.today {
    background-color: rgba(var(--primary-rgb), 0.1);
    border: 2px solid var(--primary-color);
}
.selected-day {
    background-color: rgba(var(--primary-rgb), 0.2);
    border: 2px solid var(--primary-color);
}
.has-events {
    position: relative;
}
.has-events:after {
    content: "";
    position: absolute;
    bottom: 5px;
    left: 50%;
    transform: translateX(-50%);
    width: 6px;
    height: 6px;
    background-color: var(--primary-color);
    border-radius: 50%;
}
/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */
.events-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    flex-wrap: wrap;
}
.events-header h3 {
    margin: 0;
    font-size: 18px;
    color: var(--primary-color);
}
.action-buttons {
    display: flex;
    gap: 10px;
}
.action-button {
    padding: 8px 15px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: 500;
    color: white;
    transition: all 0.2s ease;
}
.event-button {
    background-color: #4CAF50;
}
.event-button:hover {
    background-color: #3e8e41;
    transform: translateY(-2px);
}
.reminder-button {
    background-color: #F44336;
}
.reminder-button:hover {
    background-color: #d32f2f;
    transform: translateY(-2px);
}
.cancel-button {
    background-color: #6c757d;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
}
/* –°—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã */
.form-group {
    margin-bottom: 15px;
}
.form-group label {
    display: block;
    margin-bottom: 5px;
    color: var(--text-color);
    font-weight: 500;
}
/* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ */
.form-group input[type="text"],
.form-group input[type="date"],
.form-group input[type="time"],
.form-group select,
.form-group textarea {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background-color: var(--input-bg);
    color: var(--text-color);
    transition: border-color 0.3s ease;
    box-sizing: border-box;
    height: 38px;
}
/* –û—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è textarea */
.form-group textarea {
    height: auto;
    min-height: 80px;
}
.form-group input[type="text"]:focus,
.form-group input[type="date"]:focus,
.form-group input[type="time"]:focus,
.form-group select:focus,
.form-group textarea:focus {
    border-color: var(--primary-color);
    outline: none;
}
/* –°—Ç–∏–ª–∏ –¥–ª—è select –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ */
.form-group select {
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 8px center;
    background-size: 1em;
    padding-right: 30px;
    background-color: var(--input-bg);
    color: var(--text-color);
    border: 1px solid var(--border-color);
}
.dark-theme .form-group select {
    background-color: #2a2a2a;
    color: #e0e0e0;
    border-color: #444;
}
.dark-theme .form-group select option {
    background-color: #2a2a2a;
    color: #e0e0e0;
}
/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π */
.planting-form {
    background-color: var(--input-bg);
    border-radius: 8px;
    padding: 20px;
    border: 1px solid var(--border-color);
    margin-bottom: 20px;
    overflow: hidden; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤—ã—Ö–æ–¥ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã */
}
.planting-form h3 {
    margin-top: 0;
    margin-bottom: 15px;
    color: var(--primary-color);
    font-size: 18px;
}
.form-actions {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
    gap: 10px;
}
.save-button {
    background-color: var(--primary-color);
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
}
/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.5);
}
/* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
.modal-content {
    background-color: var(--card-bg);
    color: var(--text-color);
    margin: 10% auto;
    padding: 20px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    width: 80%;
    max-width: 500px;
    position: relative;
}
.close-button {
    color: var(--secondary-text);
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}
.modal-content h2,
.modal-content p strong {
    color: var(--primary-color);
}
.modal-footer {
    padding-top: 15px;
    text-align: right;
    border-top: 1px solid var(--border-color);
    margin-top: 15px;
}
.modal-footer button {
    margin-left: 10px;
}
/* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π */
.planting-events {
    margin-bottom: 30px;
    padding: 15px;
    background-color: var(--input-bg);
    border-radius: 8px;
    border: 1px solid var(--border-color);
}
.event-item {
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    margin-bottom: 10px;
    background-color: var(--card-bg);
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    color: var(--text-color);
}
.event-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}
.event-item h4 {
    margin-top: 0;
    margin-bottom: 5px;
    color: var(--text-color);
    font-size: 16px;
}
.event-item p {
    margin: 5px 0;
    color: var(--secondary-text);
    font-size: 14px;
}
.no-events {
    padding: 15px;
    text-align: center;
    color: var(--secondary-text);
    background-color: var(--card-bg);
    border-radius: 4px;
    border: 1px dashed var(--border-color);
}
/* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π */
.event-type-planting { border-left: 5px solid #4CAF50; }
.event-type-sprouting { border-left: 5px solid #2196F3; }
.event-type-watering { border-left: 5px solid #00BCD4; }
.event-type-fertilizing { border-left: 5px solid #FF9800; }
.event-type-harvesting { border-left: 5px solid #9C27B0; }
.event-type-reminder { border-left: 5px solid #F44336; }
.event-type-other { border-left: 5px solid #607D8B; }
/* –ú–∞—Ä–∫–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ */
.day-event-marker {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 3px;
}
.marker-planting { background-color: #4CAF50; }
.marker-sprouting { background-color: #2196F3; }
.marker-watering { background-color: #00BCD4; }
.marker-fertilizing { background-color: #FF9800; }
.marker-harvesting { background-color: #9C27B0; }
.marker-reminder { background-color: #F44336; }
.marker-other { background-color: #607D8B; }
.event-markers {
    position: absolute;
    bottom: 5px;
    left: 5px;
    display: flex;
}
/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã —É—Ç–∏–ª–∏—Ç */
.d-none {
    display: none !important;
}
@media (max-width: 768px) {
    .calendar-day {
        height: 60px;
    }
    .events-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
    }
    .action-buttons {
        width: 100%;
    }
    .action-button {
        flex: 1;
        text-align: center;
    }
    .form-actions {
        flex-direction: column;
        gap: 10px;
    }
    .save-button, .cancel-button, .export-button {
        width: 100%;
    }
}
.dark-theme .form-group input[type="text"],
.dark-theme .form-group input[type="date"],
.dark-theme .form-group input[type="time"],
.dark-theme .form-group textarea {
    background-color: #2a2a2a;
    color: #e0e0e0;
    border-color: #444;
}
/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è select –∏ option –≤ —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö */
.form-group select,
.form-group option {
    color: var(--text-color) !important;
    background-color: var(--input-bg) !important;
}
/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤–µ–±-–∫–∏—Ç –±—Ä–∞—É–∑–µ—Ä–æ–≤ (Chrome, Safari) */
.form-group select::-webkit-scrollbar {
    width: 8px;
}
.form-group select::-webkit-scrollbar-track {
    background: var(--border-color);
}
.form-group select::-webkit-scrollbar-thumb {
    background-color: var(--primary-color);
    border-radius: 4px;
}
/* –°—Ç–∏–ª–∏ –¥–ª—è Firefox */
@-moz-document url-prefix() {
    .form-group select {
        background-color: var(--input-bg) !important;
        color: var(--text-color) !important;
    }
    .form-group select option {
        background-color: var(--input-bg) !important;
        color: var(--text-color) !important;
    }
}
/* –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö */
select option {
    padding: 10px;
    line-height: 1.5;
}
/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
[data-theme="dark"] .form-group select,
[data-theme="dark"] .form-group select option {
    background-color: #2a2a2a !important;
    color: #e0e0e0 !important;
    border-color: #444 !important;
}
/* –°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ */
[data-theme="dark"] .form-group input[type="date"],
[data-theme="dark"] .form-group input[type="time"] {
    background-color: #2a2a2a;
    color: #e0e0e0;
    border-color: #444;
    color-scheme: dark; /* –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∏–∫–µ—Ä */
}
/* –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö) */
[data-theme="dark"] input[type="date"]::-webkit-calendar-picker-indicator {
    filter: invert(1);
}
/* –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É —á–∞—Å–æ–≤ (–µ—â–µ –º–µ–Ω–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ, —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç) */
[data-theme="dark"] input[type="time"]::-webkit-calendar-picker-indicator { /* –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ—Ç –∂–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */
    filter: invert(1);
}
.guest-notice {
    background-color: rgba(255, 193, 7, 0.2);
    border-left: 4px solid #ffc107;
    padding: 10px 15px;
    margin-bottom: 20px;
    border-radius: 4px;
}
.guest-notice p {
    margin: 0;
    color: var(--text-color, #555);
}
.guest-notice a {
    color: #007bff;
    text-decoration: none;
    font-weight: bold;
}
.guest-notice a:hover {
    text-decoration: underline;
}
button[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
}
.accordion-content {
    display: none;
    background-color: var(--card-bg);
    border-radius: 0 0 8px 8px;
    overflow: hidden;
    padding-top: 20px; /* –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É */
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}
.accordion-content.active {
    display: block;
}
.accordion-icon {
    transition: transform 0.3s ease;
}
.accordion-icon.rotate {
    transform: rotate(180deg);
}
</style>
<!-- –°–∫—Ä–∏–ø—Ç—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ—Å–∞–¥–∫–∏ -->
<script>
const isGuestUser = <?php echo $isGuest ? 'true' : 'false'; ?>;
function toggleCalendarContent() {
    const content = document.querySelector('.planting-section .accordion-content');
    const icon = document.querySelector('.planting-section .accordion-icon');
    content.classList.toggle('active');
    icon.classList.toggle('rotate');
}
document.addEventListener('DOMContentLoaded', function() {
    const content = document.querySelector('.planting-section .accordion-content');
    const icon = document.querySelector('.planting-section .accordion-icon');
    if (content && icon) {
    }
    let currentDate = new Date(); 
    let selectedDate = new Date(); 
    let eventsDB = []; 
    const months = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];
    const eventTypes = {
        planting: { name: '–ü–æ—Å–∞–¥–∫–∞', color: '#4CAF50' },
        sprouting: { name: '–í—Å—Ö–æ–¥—ã', color: '#2196F3' },
        watering: { name: '–ü–æ–ª–∏–≤', color: '#00BCD4' },
        fertilizing: { name: '–£–¥–æ–±—Ä–µ–Ω–∏–µ', color: '#FF9800' },
        harvesting: { name: '–°–±–æ—Ä —É—Ä–æ–∂–∞—è', color: '#9C27B0' },
        reminder: { name: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', color: '#F44336' },
        other: { name: '–î—Ä—É–≥–æ–µ', color: '#607D8B' }
    };
    const prevMonthBtn = document.getElementById('prev-month');
    const nextMonthBtn = document.getElementById('next-month');
    const currentMonthElement = document.getElementById('current-month');
    const calendarDaysElement = document.getElementById('calendar-days');
    const selectedDateElement = document.getElementById('selected-date');
    const eventsListElement = document.getElementById('events-list');
    const addEventBtn = document.getElementById('add-event-btn');
    const addReminderBtn = document.getElementById('add-reminder-btn');
    const eventForm = document.getElementById('event-form');
    const addPlantingForm = document.getElementById('add-planting-form');
    const formTitle = document.getElementById('form-title');
    const cancelFormBtn = document.getElementById('cancel-form-btn');
    const eventTypeSelect = document.getElementById('event-type');
    const reminderDetails = document.getElementById('reminder-details');
    const eventDateInput = document.getElementById('event-date');
    const eventTimeInput = document.getElementById('event-time');
    const reminderDateInput = document.getElementById('reminder-date');
    const reminderTimeInput = document.getElementById('reminder-time');
    const eventModal = document.getElementById('event-modal');
    const closeEventModalBtn = document.getElementById('close-event-modal');
    const closeEventBtn = document.getElementById('close-event-btn');
    const deleteEventBtn = document.getElementById('delete-event-btn');
    const editEventBtn = document.getElementById('edit-event-btn');
    const eventModalContent = document.getElementById('event-modal-content');
    const plantingSection = document.querySelector('.planting-section');
    const sectionHeader = plantingSection.querySelector('.section-header');
    const accordionContent = plantingSection.querySelector('.accordion-content');
    const accordionIcon = sectionHeader.querySelector('.accordion-icon');
    function formatDate(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }
    function formatTime(date) {
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${hours}:${minutes}`;
    }
    function formatDateRus(date) {
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${day}.${month}.${year}`;
    }
    function formatDateTimeRus(date) {
        return `${formatDateRus(date)} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;
    }
    function loadEvents() {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth() + 1;
        fetch(`api/load-planting-events.php?year=${year}&month=${month}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    eventsDB = data.events;
                    renderCalendar();
                    renderEventsList(selectedDate);
                } else {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π:', data.message);
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ–±—ã—Ç–∏–π:', error);
            });
    }
    function saveEvent(formData) {
        fetch('api/save-planting-event.php', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            const contentType = response.headers.get("content-type");
            if (contentType && contentType.indexOf("application/json") !== -1) {
                return response.json();
            } else {
                return response.text().then(text => {
                     throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + text);
                });
            }
        })
        .then(data => {
            if (data.success) {
                alert('–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
                loadEvents();
                eventForm.style.display = 'none';
            } else {
                alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + data.message);
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.');
        });
    }
    function deleteEvent(eventId) {
        if (isGuestUser) {
            alert('–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
            return;
        }
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ?')) return;
        fetch('api/delete-planting-event.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ event_id: eventId })
        })
        .then(response => response.json()) 
        .then(data => {
            if (data.success) {
                alert('–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!');
                loadEvents();
                closeModal();
            } else {
                alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + data.message);
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.');
        });
    }
    function renderCalendar() {
        calendarDaysElement.innerHTML = '';
        currentMonthElement.textContent = `${months[currentDate.getMonth()]} ${currentDate.getFullYear()}`;
        const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
        const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
        let firstDayOfWeek = firstDay.getDay();
        firstDayOfWeek = firstDayOfWeek === 0 ? 7 : firstDayOfWeek;
        const prevMonthLastDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0).getDate();
        for (let i = firstDayOfWeek - 1; i > 0; i--) {
            calendarDaysElement.appendChild(createDayElement(prevMonthLastDay - i + 1, true));
        }
        for (let i = 1; i <= lastDay.getDate(); i++) {
            const dayElement = createDayElement(i, false);
            const dayDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), i);
            const dateStr = formatDate(dayDate);
            const today = new Date();
            if (formatDate(dayDate) === formatDate(today)) {
                dayElement.classList.add('today');
            }
            if (formatDate(dayDate) === formatDate(selectedDate)) {
                dayElement.classList.add('selected-day');
            }
            const dayEvents = eventsDB.filter(event => event.event_date === dateStr);
            if (dayEvents.length > 0) {
                const eventMarkersDiv = document.createElement('div');
                eventMarkersDiv.className = 'event-markers';
                const uniqueEventTypes = [...new Set(dayEvents.map(event => event.type))];
                uniqueEventTypes.forEach(type => {
                    const marker = document.createElement('span');
                    marker.className = `day-event-marker marker-${type}`;
                    eventMarkersDiv.appendChild(marker);
                });
                dayElement.appendChild(eventMarkersDiv);
            }
            dayElement.addEventListener('click', function() {
                document.querySelectorAll('.calendar-day').forEach(day => day.classList.remove('selected-day'));
                this.classList.add('selected-day');
                selectedDate = dayDate;
                eventDateInput.value = formatDate(selectedDate);
                renderEventsList(selectedDate);
            });
            calendarDaysElement.appendChild(dayElement);
        }
        const totalCells = 42;
        const cellsRendered = (firstDayOfWeek - 1) + lastDay.getDate();
        const cellsToAdd = totalCells - cellsRendered;
        for (let i = 1; i <= cellsToAdd; i++) {
            calendarDaysElement.appendChild(createDayElement(i, true));
        }
    }
    function createDayElement(day, isOtherMonth) {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        if (isOtherMonth) dayElement.classList.add('other-month');
        const dayNumber = document.createElement('div');
        dayNumber.className = 'day-number';
        dayNumber.textContent = day;
        dayElement.appendChild(dayNumber);
        return dayElement;
    }
    function renderEventsList(date) {
        selectedDateElement.textContent = formatDateRus(date);
        eventsListElement.innerHTML = '';
        const dateStr = formatDate(date);
        const dayEvents = eventsDB.filter(event => event.event_date === dateStr);
        if (dayEvents.length === 0) {
            const noEventsElement = document.createElement('div');
            noEventsElement.className = 'no-events';
            noEventsElement.textContent = '–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É';
            eventsListElement.appendChild(noEventsElement);
            return;
        }
        dayEvents.sort((a, b) => (a.event_time || '23:59').localeCompare(b.event_time || '23:59'));
        dayEvents.forEach(event => {
            const eventElement = document.createElement('div');
            eventElement.className = `event-item event-type-${event.type}`;
            eventElement.dataset.eventId = event.id;
            const eventTitle = document.createElement('h4');
            eventTitle.textContent = event.plant_name;
            eventElement.appendChild(eventTitle);
            const eventTypeElement = document.createElement('p');
            eventTypeElement.innerHTML = `<strong>–¢–∏–ø:</strong> ${eventTypes[event.type]?.name || event.type}`;
            eventElement.appendChild(eventTypeElement);
            if (event.event_time) {
                const eventTimeElement = document.createElement('p');
                eventTimeElement.innerHTML = `<strong>–í—Ä–µ–º—è:</strong> ${event.event_time}`;
                eventElement.appendChild(eventTimeElement);
            }
            if (event.notes) {
                const notesElement = document.createElement('p');
                notesElement.innerHTML = `<strong>–ó–∞–º–µ—Ç–∫–∏:</strong> ${event.notes}`;
                eventElement.appendChild(notesElement);
            }
            if (event.reminder) {
                const reminderElement = document.createElement('p');
                const reminderDate = event.reminder.date ? formatDateRus(new Date(event.reminder.date.split('-').join(','))) : 'N/A';
                const reminderTime = event.reminder.time || '';
                const reminderStatus = event.reminder.is_shown ? ' (–ø–æ–∫–∞–∑–∞–Ω–æ)' : '';
                reminderElement.innerHTML = `<strong>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</strong> ${reminderDate} ${reminderTime}${reminderStatus}`;
                eventElement.appendChild(reminderElement);
            }
            eventElement.addEventListener('click', () => showEventDetails(event.id));
            eventsListElement.appendChild(eventElement);
        });
    }
    function showEventDetails(eventId) {
        const event = eventsDB.find(e => e.id === eventId);
        if (!event) return;
        document.getElementById('event-modal-title').textContent = `–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è: ${event.plant_name}`;
        let reminderHtml = '';
        if (event.reminder) {
             const reminderDate = event.reminder.date ? formatDateRus(new Date(event.reminder.date.split('-').join(','))) : 'N/A';
             const reminderTime = event.reminder.time || '';
             const reminderStatus = event.reminder.is_shown ? ' (–ø–æ–∫–∞–∑–∞–Ω–æ)' : '';
             reminderHtml = `<p><strong>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</strong> ${reminderDate} ${reminderTime}${reminderStatus}</p>`;
        }
        eventModalContent.innerHTML = `
            <div class="event-details">
                <p><strong>–†–∞—Å—Ç–µ–Ω–∏–µ:</strong> ${event.plant_name}</p>
                <p><strong>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:</strong> ${eventTypes[event.type]?.name || event.type}</p>
                <p><strong>–î–∞—Ç–∞:</strong> ${event.event_date ? formatDateRus(new Date(event.event_date.split('-').join(','))) : 'N/A'}</p>
                ${event.event_time ? `<p><strong>–í—Ä–µ–º—è:</strong> ${event.event_time}</p>` : ''}
                ${event.notes ? `<p><strong>–ó–∞–º–µ—Ç–∫–∏:</strong> ${event.notes}</p>` : ''}
                ${reminderHtml}
            </div>
        `;
        deleteEventBtn.dataset.eventId = eventId;
        editEventBtn.dataset.eventId = eventId;
        eventModal.style.display = 'block';
    }
    function closeModal() {
        eventModal.style.display = 'none';
    }
    function checkScheduledReminders() {
    }
    function initCalendar() {
        loadEvents();
        const today = new Date();
        eventDateInput.value = formatDate(today);
        checkScheduledReminders();
    }
    if(prevMonthBtn && nextMonthBtn) {
        prevMonthBtn.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            loadEvents();
        });
        nextMonthBtn.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            loadEvents();
        });
    }
    if (addEventBtn) {
        addEventBtn.addEventListener('click', () => {
            if (isGuestUser) {
                alert('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
                return;
            }
            eventForm.style.display = 'block';
            formTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ';
            addPlantingForm.reset();
            eventTypeSelect.value = 'planting';
            const now = new Date();
            eventDateInput.value = formatDate(now);
            eventTimeInput.value = formatTime(now);
            reminderDetails.style.display = 'none';
            eventForm.scrollIntoView({ behavior: 'smooth' });
        });
    }
    if (addReminderBtn) {
        addReminderBtn.addEventListener('click', () => {
            if (isGuestUser) {
                alert('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
                return;
            }
            eventForm.style.display = 'block';
            formTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
            addPlantingForm.reset();
            eventTypeSelect.value = 'reminder';
            const now = new Date();
            eventDateInput.value = formatDate(now);
            eventTimeInput.value = formatTime(now);
            reminderDetails.style.display = 'block';
            reminderDateInput.value = formatDate(now);
            reminderTimeInput.value = formatTime(now);
            eventForm.scrollIntoView({ behavior: 'smooth' });
        });
    }
    if (eventTypeSelect) {
        eventTypeSelect.addEventListener('change', function() {
            reminderDetails.style.display = (this.value === 'reminder') ? 'block' : 'none';
        });
    }
    if (cancelFormBtn) {
        cancelFormBtn.addEventListener('click', () => {
            eventForm.style.display = 'none';
        });
    }
    if (addPlantingForm) {
        addPlantingForm.addEventListener('submit', function(e) {
            e.preventDefault();
            if (isGuestUser) {
                alert('–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
                return;
            }
            const formData = new FormData(this);
            const now = new Date();
            if (!formData.get('event-date')) formData.set('event-date', formatDate(now));
            if (!formData.get('event-time')) { 
                const currentEventTime = eventTimeInput.value;
                if (!currentEventTime) {
                    formData.set('event-time', formatTime(now));
                } else {
                    formData.set('event-time', currentEventTime); 
                }
            }
            if (formData.get('event-type') === 'reminder') {
                if (!formData.get('reminder-date')) formData.set('reminder-date', formatDate(now));
                const currentReminderTime = reminderTimeInput.value;
                if (!currentReminderTime) {
                    formData.set('reminder-time', formatTime(now));
                } else {
                    formData.set('reminder-time', currentReminderTime); 
                }
            }
            saveEvent(formData);
        });
    }
    if (closeEventModalBtn) closeEventModalBtn.addEventListener('click', closeModal);
    if (closeEventBtn) closeEventBtn.addEventListener('click', closeModal);
    window.addEventListener('click', (event) => {
        if (event.target === eventModal) closeModal();
    });
    if (deleteEventBtn) {
        deleteEventBtn.addEventListener('click', function() {
            const eventId = parseInt(this.dataset.eventId);
            if (eventId) deleteEvent(eventId);
        });
    }
    if (editEventBtn) {
        editEventBtn.addEventListener('click', function() {
            if (isGuestUser) {
                alert('–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
                return;
            }
            const eventId = parseInt(this.dataset.eventId);
            const event = eventsDB.find(e => e.id === eventId);
            if (event) {
                formTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ';
                addPlantingForm.reset(); 
                let eventIdInput = addPlantingForm.querySelector('input[name="event_id"]');
                if (!eventIdInput) {
                    eventIdInput = document.createElement('input');
                    eventIdInput.type = 'hidden';
                    eventIdInput.name = 'event_id';
                    addPlantingForm.appendChild(eventIdInput);
                }
                eventIdInput.value = event.id;
                eventTypeSelect.value = event.type;
                document.getElementById('plant-name').value = event.plant_name || '';
                eventDateInput.value = event.event_date || '';
                eventTimeInput.value = event.event_time || '';
                document.getElementById('event-notes').value = event.notes || '';
                if (event.type === 'reminder' && event.reminder) {
                    reminderDetails.style.display = 'block';
                    reminderDateInput.value = event.reminder.date || '';
                    reminderTimeInput.value = event.reminder.time || '';
                } else {
                    reminderDetails.style.display = 'none';
                }
                closeModal();
                eventForm.style.display = 'block';
                eventForm.scrollIntoView({ behavior: 'smooth' });
            } else {
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
            }
        });
    }
    function openModal(event) {
        eventModalContent.innerHTML = generateEventHTML(event);
        eventModal.style.display = 'block';
        editEventBtn.dataset.eventId = event.id;
        deleteEventBtn.dataset.eventId = event.id;
        editEventBtn.style.display = isGuestUser ? 'none' : 'inline-block';
        deleteEventBtn.style.display = isGuestUser ? 'none' : 'inline-block';
    }
    initCalendar();
});
</script> 